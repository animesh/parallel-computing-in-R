library(snow)
z=vector('list',4)
z=1:4
system.time(lapply(z,function(x) Sys.sleep(1)))
library(snow)
z=vector('list',4)
z=1:4
system.time(lapply(z,function(x) Sys.sleep(1)))
cl<-makeCluster(4,type="SOCK")
system.time(clusterApply(cl, z,function(x) Sys.sleep(1)))
stopCluster(cl)
z
function(x)
()
clusterApply(cl, z,function(x))
clusterApply(cl, z,function(x){})
library(snow)
clusterApply(cl, z,function(x){})
cl <- makeCluster(4,type="SOCK")
clusterApply(cl, z,function(x){})
clusterApply(cl,z,function(x){})
z=vector('list',20)
clusterApply(cl,z,function(x){})
library(snow)
z=vector('list',20)
cl <- makeCluster(4,type="SOCK")
clusterApply(cl,z,function(x){print(x)})
stopCluster(cl)
library(phetmap)
z=matrix(1000,nrow=10)
cl <- makeCluster(4,type="SOCK")
View(z)
z=matrix(rnorm(1000),nrow=10)
cl <- makeCluster(4,type="SOCK")
clusterApply(cl,z,function(x){pheatmap(x)})
library(pheatmap)
z=matrix(rnorm(1000),nrow=10)
cl <- makeCluster(4,type="SOCK")
clusterApply(cl,z,function(x){pheatmap(x)})
library(pheatmap)
pheatmap(z)
function(x){pheatmap(x)}
clusterApply(cl,z,pheaatmap(z))
clusterApply(cl,z,pheatmap(z))
clusterApply(cl,z,mean)
customfunc <- function(x){pheatmap(x)}
clusterApply(cl,z,customfunc)
customfunc <- function(x){pheatmap(x)}
View(customfunc)
cl <- makeCluster(4,type="SOCK")
customfunc <- function(x){pheatmap(x)}
clusterApply(cl,z,customfunc)
customfunc <- function(x){print(x)}
clusterApply(cl,z,customfunc)
clusterApply(cl, 1:2, get("+"), 3)
z=matrix(rnorm(4),nrow=2)
cl <- makeCluster(4,type="SOCK")
customfunc <- function(x){print(x)}
clusterApply(cl,z,customfunc)
z=matrix(rnorm(8),nrow=2)
cl <- makeCluster(4,type="SOCK")
customfunc <- function(x){print(x)}
clusterApply(cl,z,customfunc)
customfunc <- function(x){(x <- x+1)}
clusterApply(cl,z,customfunc)
customfunc <- function(x){(x <- x+100)}
clusterApply(cl,z,customfunc)
z=matrix(rnorm(8),nrow=2)
cl <- makeCluster(4,type="SOCK")
customfunc <- function(x){(x <- x+100;return(x))}
clusterApply(cl,z,customfunc)
customfunc <- function(x){y <- x+100
return(y)}
clusterApply(cl,z,customfunc)
knitr::opts_chunk$set(echo = TRUE)
#------------------------
##https://costalab.ukaachen.de/open_data/Bioinformatics_Analysis_in_R_2019/BIAR_D3/handout.html#1_intro
# Load packages
library("TCGAbiolinks")
library("limma")
library("edgeR")
library("glmnet")
library("factoextra")
library("FactoMineR")
library("caret")
library("SummarizedExperiment")
library("gplots")
library("survival")
library("survminer")
library("RColorBrewer")
library("gProfileR")
library("genefilter")
#----------TCGA data-----------
GDCprojects = getGDCprojects()
head(GDCprojects[c("project_id", "name")])
# https://docs.gdc.cancer.gov/Data_Portal/Users_Guide/Projects/
TCGAbiolinks:::getProjectSummary("TCGA-BRCA")
## the summary shows that TCGA provide data for 500 patients including clinical, expression, DNA methylation, and genotyping data
##Now, we focus on a particular type of data summarization for mRNA-seq data (workflow.type), which is based on raw counts estimated with HTSeq.
query_TCGA = GDCquery(
project = "TCGA-BRCA",
data.category = "Transcriptome Profiling", # parameter enforced by GDCquery
experimental.strategy = "RNA-Seq",
workflow.type = "HTSeq - Counts")
View(cl)
head(GDCprojects[c("project_id", "name")])
View(GDCprojects)
##Visualize the query results
prad_res = getResults(query_TCGA) # make results as table
View(prad_res)
# head(prad_res) # data of the first 6 patients.
colnames(prad_res) # columns present in the table
head(prad_res$sample_type) # first 6 types of tissue.
class(prad_res$sample_type)
prad_res$sample_type <- as.factor(prad_res$sample_type)
summary(prad_res$sample_type) # summary of distinct tissues types present in this study
##for simplicity, we ignore the small class of metastasis, therefore, we redo the query
query_TCGA = GDCquery(
project = "TCGA-BRCA",
data.category = "Transcriptome Profiling", # parameter enforced by GDCquery
experimental.strategy = "RNA-Seq",
workflow.type = "HTSeq - Counts",
sample.type = c("Primary Tumor", "Solid Tissue Normal"))
View(cl)
##Next, we need to download the files from the query
GDCdownload(query = query_TCGA)
tcga_data = GDCprepare(query_TCGA)
dim(tcga_data)
colnames(colData(tcga_data))
##Note that both clinical and expression data are present in this object
table(tcga_data@colData$vital_status)
table(tcga_data@colData$tumor_state)
table(tcga_data@colData$definition)
table(tcga_data@colData$tissue_or_organ_of_origin)
table(tcga_data@colData$primary_gleason_grade)
table(tcga_data@colData$psecondary_gleason_grade)
#table(tcga_data@colData$gender)
table(tcga_data@colData$race)
gc()
dim(assay(tcga_data))     # gene expression matrices
head(assay(tcga_data)[,1:10]) # expression of first 6 genes and first 10 samples
head(rowData(tcga_data))     # ensembl id and gene id of the first 6 genes.
# Save the data as a file, if you need it later, you can just load this file
# instead of having to run the whole pipeline again
saveRDS(object = tcga_data,
file = "tcga_data.RDS",
compress = FALSE)
#----------the data can be loaded and begin from here--------
#tcga_data = readRDS(file = "tcga_data.RDS")
#---------RNASeq Normalization--------
limma_pipeline = function(
tcga_data,
condition_variable,
reference_group=NULL){
design_factor = colData(tcga_data)[, condition_variable, drop=T]
group = factor(design_factor)
if(!is.null(reference_group)){group = relevel(group, ref=reference_group)}
design = model.matrix(~ group)
dge = DGEList(counts=assay(tcga_data),
samples=colData(tcga_data),
genes=as.data.frame(rowData(tcga_data)))
# filtering
keep = filterByExpr(dge,design)
dge = dge[keep,,keep.lib.sizes=FALSE]
rm(keep)
# Normalization (TMM followed by voom)
dge = calcNormFactors(dge)
v = voom(dge, design, plot=TRUE)
# Fit model to data given design
fit = lmFit(v, design)
fit = eBayes(fit)
# Show top genes
topGenes = topTable(fit, coef=ncol(design), number=100, sort.by="p")
return(
list(
voomObj=v, # normalized data
fit=fit, # fitted model and statistics
topGenes=topGenes # the 100 most differentially expressed genes
)
}
limma_res = limma_pipeline(
tcga_data=tcga_data,
condition_variable="definition",
reference_group="Solid Tissue Normal"
)
#race_limma_res = limma_pipeline(
# tcga_data=tcga_data,
#condition_variable="race",
#reference_group="white"
#)
# Save the data as a file, if you need it later, you can just load this file
# instead of having to run the whole pipeline again
saveRDS(object = limma_res,
file = "limma_res.RDS",
compress = FALSE)
#----------the data can be loaded and begin from here--------
#limma_res = readRDS(file = "limma_res.RDS")
#----------Visualization------------------------------------
plot_PCA = function(voomObj, condition_variable){
group = factor(voomObj$targets[, condition_variable])
pca = prcomp(t(voomObj$E))
# Take PC1 and PC2 for the plot
plot(pca$x[,1:2],col=group, pch=19)
# include a legend for points
legend("bottomleft", inset=.01, levels(group), pch=19, col=1:length(levels(group)))
return(pca)
}
res_pca = plot_PCA(limma_res$voomObj, "definition")
#---------Survival analysis (Simple)---------------------------
#Question: Does race influence survival in prostate cancer patients?
# extract clinical data
clinical = tcga_data@colData
dim(clinical)
# we are only interested in the "Primary solid Tumor" cases for survival
clin_df = clinical[clinical$definition == "Primary solid Tumor",
c("patient",
"vital_status", #whether the patient is alive or dead
"days_to_death", #the number of days passed from initial diagnosis to the death
"days_to_last_follow_up", #the number of days passed from initial diagnosis to last visit
"race")]
# create a new boolean variable that has TRUE for dead patients
# and FALSE for live patients
clin_df$deceased = clin_df$vital_status == "Dead"
# create an "overall survival" variable that is equal to days_to_death
# for dead patients, and to days_to_last_follow_up for patients who
# are still alive
clin_df$overall_survival = ifelse(clin_df$deceased,
clin_df$days_to_death,
clin_df$days_to_last_follow_up)
# show first 6 samples
head(clin_df)
table(clin_df$race)
#Let's see if different races have had different prognosis
Surv(clin_df$overall_survival, clin_df$deceased)
Surv(clin_df$overall_survival, clin_df$deceased) ~ clin_df$race
# fit a survival model
fit = survfit(Surv(overall_survival, deceased) ~ race, data=clin_df)
print(fit)
# we produce a Kaplan Meier plot
ggsurvplot(fit, data=clin_df, pval = T)
ggsurvplot(fit, data=clin_df, pval=T, risk.table=T, risk.table.col="strata")
View(clin_df)
View(clinical)
gc()
library(snow)
library(pheatmap)
z=matrix(rnorm(8),nrow=2)
cl <- makeCluster(4,type="SOCK")
customfunc <- function(x){y <- x+100
return(y)}
clusterApply(cl,z,customfunc)
stopCluster(cl)
output <- clusterApply(cl,z,customfunc)
library(snow)
library(pheatmap)
z=matrix(rnorm(8),nrow=2)
cl <- makeCluster(4,type="SOCK")
customfunc <- function(x){y <- x+100
return(y)}
output <- clusterApply(cl,z,customfunc)
stopCluster(cl)
View(output)
library(parallel)
detectCores()
r <- mclapply(1:10, function(i) {Sys.sleep(10)} ,mc.cores = 10)
gc()
